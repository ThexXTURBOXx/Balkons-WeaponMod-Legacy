plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_version"
    modApi "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    var replaceProperties = [
            minecraft_version          : minecraft_version, minecraft_version_range: minecraft_version_range,
            minecraft_version_condition: minecraft_version_condition,
            neoforge_version           : neoforge_version, neoforge_version_range: neoforge_version_range,
            loader_version_range       : loader_version_range, mod_update_json: mod_update_json,
            architectury_version       : architectury_version, cloth_config_version: cloth_config_version,
            mod_id                     : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors                : mod_authors, mod_authors_list: mod_authors_list, mod_description: mod_description,
            mod_issues_url             : mod_issues_url, mod_sources_url: mod_sources_url, mod_home_url: mod_home_url,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    atAccessWideners.add loom.accessWidenerPath.get().asFile.name
}
